/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.6/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven { url = uri("https://nexus.velocitypowered.com/repository/maven-public/") }
}

dependencies {
    // Some other library is already packaging lwjgl, apparently. Maybe slick?
//    implementation("org.lwjgl:lwjgl-glfw:2.9.3")
//    implementation("org.lwjgl:lwjgl-opengl:2.9.3")
//    implementation("org.lwjgl:lwjgl-openal:2.9.3")

    implementation("org.slick2d:slick2d-core:1.0.2")

    implementation("com.paulscode:soundsystem:201809301515")
    implementation("com.paulscode:codecjorbis:20101023")
    implementation("com.paulscode:codecwav:20101023")
    implementation("com.paulscode:librarylwjglopenal:20100824")
}

sourceSets {
    main {
        resources {
            srcDir("src/main/resources")
        }
    }
}

// idk where this came from but it doesn't do anything
//tasks {
//    val nativeLibs by creating(Copy::class) {
////        from(configurations.runtime)
//        into("${layout.buildDirectory}/libs")
//        include("*.dll", "*.so", "*.dylib")
//    }
//
//    "jar" {
//        dependsOn(nativeLibs)
//    }
//}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "gamePackage.Main"
}

val copyNeighbors by tasks.registering(Copy::class) {
    // Define the source directory to copy
    from("src/main/neighbors") // Adjust the path accordingly

    // Define the destination directory
    into(layout.buildDirectory.dir("libs")) // Adjust the destination directory as needed
}

// Add the custom task as a dependency of the build task
tasks.startScripts {
    dependsOn(copyNeighbors)
}

tasks.withType<Jar> {
    // This ensures the dependencies are loaded into the jar
    from(configurations.runtimeClasspath.get().map { if (it.isDirectory) it else zipTree(it) })

    // This is because some dependencies are loaded more than once (??)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes["Main-Class"] = application.mainClass
    }
    archiveBaseName.set("Dodgegame")
}
